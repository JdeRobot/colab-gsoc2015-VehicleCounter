// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ardroneextra.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package jderobot;

public final class ArDroneExtraPrxHelper extends Ice.ObjectPrxHelperBase implements ArDroneExtraPrx
{
    private static final String __flatTrim_name = "flatTrim";

    public void flatTrim()
    {
        flatTrim(null, false);
    }

    public void flatTrim(java.util.Map<String, String> __ctx)
    {
        flatTrim(__ctx, true);
    }

    private void flatTrim(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "flatTrim", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ArDroneExtraDel __del = (_ArDroneExtraDel)__delBase;
                    __del.flatTrim(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_flatTrim()
    {
        return begin_flatTrim(null, false, null);
    }

    public Ice.AsyncResult begin_flatTrim(java.util.Map<String, String> __ctx)
    {
        return begin_flatTrim(__ctx, true, null);
    }

    public Ice.AsyncResult begin_flatTrim(Ice.Callback __cb)
    {
        return begin_flatTrim(null, false, __cb);
    }

    public Ice.AsyncResult begin_flatTrim(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_flatTrim(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_flatTrim(Callback_ArDroneExtra_flatTrim __cb)
    {
        return begin_flatTrim(null, false, __cb);
    }

    public Ice.AsyncResult begin_flatTrim(java.util.Map<String, String> __ctx, Callback_ArDroneExtra_flatTrim __cb)
    {
        return begin_flatTrim(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_flatTrim(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __flatTrim_name, __cb);
        try
        {
            __result.__prepare(__flatTrim_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_flatTrim(Ice.AsyncResult __result)
    {
        __end(__result, __flatTrim_name);
    }

    private static final String __flightAnimation_name = "flightAnimation";

    public void flightAnimation(int type, float duration)
    {
        flightAnimation(type, duration, null, false);
    }

    public void flightAnimation(int type, float duration, java.util.Map<String, String> __ctx)
    {
        flightAnimation(type, duration, __ctx, true);
    }

    private void flightAnimation(int type, float duration, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "flightAnimation", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ArDroneExtraDel __del = (_ArDroneExtraDel)__delBase;
                    __del.flightAnimation(type, duration, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_flightAnimation(int type, float duration)
    {
        return begin_flightAnimation(type, duration, null, false, null);
    }

    public Ice.AsyncResult begin_flightAnimation(int type, float duration, java.util.Map<String, String> __ctx)
    {
        return begin_flightAnimation(type, duration, __ctx, true, null);
    }

    public Ice.AsyncResult begin_flightAnimation(int type, float duration, Ice.Callback __cb)
    {
        return begin_flightAnimation(type, duration, null, false, __cb);
    }

    public Ice.AsyncResult begin_flightAnimation(int type, float duration, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_flightAnimation(type, duration, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_flightAnimation(int type, float duration, Callback_ArDroneExtra_flightAnimation __cb)
    {
        return begin_flightAnimation(type, duration, null, false, __cb);
    }

    public Ice.AsyncResult begin_flightAnimation(int type, float duration, java.util.Map<String, String> __ctx, Callback_ArDroneExtra_flightAnimation __cb)
    {
        return begin_flightAnimation(type, duration, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_flightAnimation(int type, float duration, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __flightAnimation_name, __cb);
        try
        {
            __result.__prepare(__flightAnimation_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(type);
            __os.writeFloat(duration);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_flightAnimation(Ice.AsyncResult __result)
    {
        __end(__result, __flightAnimation_name);
    }

    private static final String __land_name = "land";

    public void land()
    {
        land(null, false);
    }

    public void land(java.util.Map<String, String> __ctx)
    {
        land(__ctx, true);
    }

    private void land(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "land", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ArDroneExtraDel __del = (_ArDroneExtraDel)__delBase;
                    __del.land(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_land()
    {
        return begin_land(null, false, null);
    }

    public Ice.AsyncResult begin_land(java.util.Map<String, String> __ctx)
    {
        return begin_land(__ctx, true, null);
    }

    public Ice.AsyncResult begin_land(Ice.Callback __cb)
    {
        return begin_land(null, false, __cb);
    }

    public Ice.AsyncResult begin_land(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_land(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_land(Callback_ArDroneExtra_land __cb)
    {
        return begin_land(null, false, __cb);
    }

    public Ice.AsyncResult begin_land(java.util.Map<String, String> __ctx, Callback_ArDroneExtra_land __cb)
    {
        return begin_land(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_land(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __land_name, __cb);
        try
        {
            __result.__prepare(__land_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_land(Ice.AsyncResult __result)
    {
        __end(__result, __land_name);
    }

    private static final String __ledAnimation_name = "ledAnimation";

    public void ledAnimation(int type, float duration, float req)
    {
        ledAnimation(type, duration, req, null, false);
    }

    public void ledAnimation(int type, float duration, float req, java.util.Map<String, String> __ctx)
    {
        ledAnimation(type, duration, req, __ctx, true);
    }

    private void ledAnimation(int type, float duration, float req, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "ledAnimation", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ArDroneExtraDel __del = (_ArDroneExtraDel)__delBase;
                    __del.ledAnimation(type, duration, req, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_ledAnimation(int type, float duration, float req)
    {
        return begin_ledAnimation(type, duration, req, null, false, null);
    }

    public Ice.AsyncResult begin_ledAnimation(int type, float duration, float req, java.util.Map<String, String> __ctx)
    {
        return begin_ledAnimation(type, duration, req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_ledAnimation(int type, float duration, float req, Ice.Callback __cb)
    {
        return begin_ledAnimation(type, duration, req, null, false, __cb);
    }

    public Ice.AsyncResult begin_ledAnimation(int type, float duration, float req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_ledAnimation(type, duration, req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_ledAnimation(int type, float duration, float req, Callback_ArDroneExtra_ledAnimation __cb)
    {
        return begin_ledAnimation(type, duration, req, null, false, __cb);
    }

    public Ice.AsyncResult begin_ledAnimation(int type, float duration, float req, java.util.Map<String, String> __ctx, Callback_ArDroneExtra_ledAnimation __cb)
    {
        return begin_ledAnimation(type, duration, req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_ledAnimation(int type, float duration, float req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __ledAnimation_name, __cb);
        try
        {
            __result.__prepare(__ledAnimation_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(type);
            __os.writeFloat(duration);
            __os.writeFloat(req);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_ledAnimation(Ice.AsyncResult __result)
    {
        __end(__result, __ledAnimation_name);
    }

    private static final String __recordOnUsb_name = "recordOnUsb";

    public void recordOnUsb(boolean record)
    {
        recordOnUsb(record, null, false);
    }

    public void recordOnUsb(boolean record, java.util.Map<String, String> __ctx)
    {
        recordOnUsb(record, __ctx, true);
    }

    private void recordOnUsb(boolean record, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "recordOnUsb", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ArDroneExtraDel __del = (_ArDroneExtraDel)__delBase;
                    __del.recordOnUsb(record, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_recordOnUsb(boolean record)
    {
        return begin_recordOnUsb(record, null, false, null);
    }

    public Ice.AsyncResult begin_recordOnUsb(boolean record, java.util.Map<String, String> __ctx)
    {
        return begin_recordOnUsb(record, __ctx, true, null);
    }

    public Ice.AsyncResult begin_recordOnUsb(boolean record, Ice.Callback __cb)
    {
        return begin_recordOnUsb(record, null, false, __cb);
    }

    public Ice.AsyncResult begin_recordOnUsb(boolean record, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_recordOnUsb(record, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_recordOnUsb(boolean record, Callback_ArDroneExtra_recordOnUsb __cb)
    {
        return begin_recordOnUsb(record, null, false, __cb);
    }

    public Ice.AsyncResult begin_recordOnUsb(boolean record, java.util.Map<String, String> __ctx, Callback_ArDroneExtra_recordOnUsb __cb)
    {
        return begin_recordOnUsb(record, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_recordOnUsb(boolean record, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __recordOnUsb_name, __cb);
        try
        {
            __result.__prepare(__recordOnUsb_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(record);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_recordOnUsb(Ice.AsyncResult __result)
    {
        __end(__result, __recordOnUsb_name);
    }

    private static final String __reset_name = "reset";

    public void reset()
    {
        reset(null, false);
    }

    public void reset(java.util.Map<String, String> __ctx)
    {
        reset(__ctx, true);
    }

    private void reset(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "reset", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ArDroneExtraDel __del = (_ArDroneExtraDel)__delBase;
                    __del.reset(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_reset()
    {
        return begin_reset(null, false, null);
    }

    public Ice.AsyncResult begin_reset(java.util.Map<String, String> __ctx)
    {
        return begin_reset(__ctx, true, null);
    }

    public Ice.AsyncResult begin_reset(Ice.Callback __cb)
    {
        return begin_reset(null, false, __cb);
    }

    public Ice.AsyncResult begin_reset(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_reset(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_reset(Callback_ArDroneExtra_reset __cb)
    {
        return begin_reset(null, false, __cb);
    }

    public Ice.AsyncResult begin_reset(java.util.Map<String, String> __ctx, Callback_ArDroneExtra_reset __cb)
    {
        return begin_reset(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_reset(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __reset_name, __cb);
        try
        {
            __result.__prepare(__reset_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_reset(Ice.AsyncResult __result)
    {
        __end(__result, __reset_name);
    }

    private static final String __takeoff_name = "takeoff";

    public void takeoff()
    {
        takeoff(null, false);
    }

    public void takeoff(java.util.Map<String, String> __ctx)
    {
        takeoff(__ctx, true);
    }

    private void takeoff(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "takeoff", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ArDroneExtraDel __del = (_ArDroneExtraDel)__delBase;
                    __del.takeoff(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_takeoff()
    {
        return begin_takeoff(null, false, null);
    }

    public Ice.AsyncResult begin_takeoff(java.util.Map<String, String> __ctx)
    {
        return begin_takeoff(__ctx, true, null);
    }

    public Ice.AsyncResult begin_takeoff(Ice.Callback __cb)
    {
        return begin_takeoff(null, false, __cb);
    }

    public Ice.AsyncResult begin_takeoff(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_takeoff(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_takeoff(Callback_ArDroneExtra_takeoff __cb)
    {
        return begin_takeoff(null, false, __cb);
    }

    public Ice.AsyncResult begin_takeoff(java.util.Map<String, String> __ctx, Callback_ArDroneExtra_takeoff __cb)
    {
        return begin_takeoff(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_takeoff(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __takeoff_name, __cb);
        try
        {
            __result.__prepare(__takeoff_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_takeoff(Ice.AsyncResult __result)
    {
        __end(__result, __takeoff_name);
    }

    private static final String __toggleCam_name = "toggleCam";

    public void toggleCam()
    {
        toggleCam(null, false);
    }

    public void toggleCam(java.util.Map<String, String> __ctx)
    {
        toggleCam(__ctx, true);
    }

    private void toggleCam(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "toggleCam", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ArDroneExtraDel __del = (_ArDroneExtraDel)__delBase;
                    __del.toggleCam(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_toggleCam()
    {
        return begin_toggleCam(null, false, null);
    }

    public Ice.AsyncResult begin_toggleCam(java.util.Map<String, String> __ctx)
    {
        return begin_toggleCam(__ctx, true, null);
    }

    public Ice.AsyncResult begin_toggleCam(Ice.Callback __cb)
    {
        return begin_toggleCam(null, false, __cb);
    }

    public Ice.AsyncResult begin_toggleCam(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_toggleCam(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_toggleCam(Callback_ArDroneExtra_toggleCam __cb)
    {
        return begin_toggleCam(null, false, __cb);
    }

    public Ice.AsyncResult begin_toggleCam(java.util.Map<String, String> __ctx, Callback_ArDroneExtra_toggleCam __cb)
    {
        return begin_toggleCam(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_toggleCam(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __toggleCam_name, __cb);
        try
        {
            __result.__prepare(__toggleCam_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_toggleCam(Ice.AsyncResult __result)
    {
        __end(__result, __toggleCam_name);
    }

    public static ArDroneExtraPrx checkedCast(Ice.ObjectPrx __obj)
    {
        ArDroneExtraPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ArDroneExtraPrx)
            {
                __d = (ArDroneExtraPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ArDroneExtraPrxHelper __h = new ArDroneExtraPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ArDroneExtraPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ArDroneExtraPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ArDroneExtraPrx)
            {
                __d = (ArDroneExtraPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ArDroneExtraPrxHelper __h = new ArDroneExtraPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ArDroneExtraPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ArDroneExtraPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ArDroneExtraPrxHelper __h = new ArDroneExtraPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ArDroneExtraPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ArDroneExtraPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ArDroneExtraPrxHelper __h = new ArDroneExtraPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ArDroneExtraPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        ArDroneExtraPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ArDroneExtraPrx)
            {
                __d = (ArDroneExtraPrx)__obj;
            }
            else
            {
                ArDroneExtraPrxHelper __h = new ArDroneExtraPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ArDroneExtraPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ArDroneExtraPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ArDroneExtraPrxHelper __h = new ArDroneExtraPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::jderobot::ArDroneExtra"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _ArDroneExtraDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _ArDroneExtraDelD();
    }

    public static void __write(IceInternal.BasicStream __os, ArDroneExtraPrx v)
    {
        __os.writeProxy(v);
    }

    public static ArDroneExtraPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ArDroneExtraPrxHelper result = new ArDroneExtraPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
